/* Checksum.ai autogenerated test */
import { test as base, expect } from "@playwright/test";
import { init, IChecksumPage } from "@checksum-ai/runtime";

const { test, defineChecksumTest, login } = init(base);

test.describe("DatahubSqleditor", () => {
  test.beforeEach(async ({ page }: { page: IChecksumPage }) => {
    await login(page);
    await page.goto("/datahub/sqleditor", { waitUntil: "domcontentloaded" });
  });

  test(
    defineChecksumTest("The user creates a new saved query", "nyWrO"),
    async ({ page }) => {
      await page
        .checksumSelector("t2uoQ")
        .checksumAI(
          "Click on the 'SQL Editor' link in the 'Analytics Tools' section."
        )
        .getByRole("link", { name: "SQL Editor" })
        .click();
      await expect(
        page.getByText("Data Collaboration Platform").first()
      ).not.toBeVisible();
      await expect(
        page.getByText("What would you like to do today?").first()
      ).not.toBeVisible();
      await expect(page).toHaveURL(/\/datahub\/sqleditor(\?.*)?(\#.*)?$/);
      await page
        .checksumSelector("ra7qx")
        .checksumAI("Type the SQL query into the contenteditable area.")
        .locator("div")
        .filter({ hasText: /^select \* from qeng_brand_1 limit 10$/ })
        .first()
        .click();
      await page
        .checksumSelector("ra7qx")
        .checksumAI("Type the SQL query into the contenteditable area.")
        .locator("div")
        .filter({ hasText: /^select \* from qeng_brand_1 limit 10$/ })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("Xpv3g")
        .checksumAI("Click the 'Run Query' button to execute the SQL query.")
        .getByTestId("sql-editor-run-query-btn")
        .click();
      await expect(page.getByText("Cancel Query").first()).toBeVisible();
      await expect(
        page.getByText("00:00:00.33 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.36 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.42 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.47 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.53 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.55 (1/1 query)").first()
      ).toBeVisible();
      await expect(page.getByText("Run Query").first()).toBeVisible();
      await expect(
        page.getByText("Run Query (Ctrl + Enter)").first()
      ).toBeVisible();
      await page
        .checksumSelector("yRq07")
        .checksumAI(
          "Correctly enter the SQL query into the contenteditable area."
        )
        .locator("div")
        .filter({
          hasText:
            /^select \* from qeng_brand_1 limit 10select \* from qeng_brand_1 limit 10$/,
        })
        .first()
        .click();
      await page
        .checksumSelector("9tQBY")
        .checksumAI("Fill the contenteditable area with the SQL query.")
        .locator("div")
        .filter({
          hasText:
            /^select \* from qeng_brand_1 limit 10select \* from qeng_brand_1 limit 10$/,
        })
        .first()
        .click();
      await page
        .checksumSelector("9tQBY")
        .checksumAI("Fill the contenteditable area with the SQL query.")
        .locator("div")
        .filter({
          hasText:
            /^select \* from qeng_brand_1 limit 10select \* from qeng_brand_1 limit 10$/,
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("D5JcX")
        .checksumAI(
          "Fill the newly identified contenteditable area with the SQL query."
        )
        .locator("div:nth-child(5) > .ace_scrollbar-inner")
        .click();
      await page
        .checksumSelector("D5JcX")
        .checksumAI(
          "Fill the newly identified contenteditable area with the SQL query."
        )
        .locator("div:nth-child(5) > .ace_scrollbar-inner")
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("Oqn0e")
        .checksumAI("Correct the SQL query in the contenteditable area.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("Oqn0e")
        .checksumAI("Correct the SQL query in the contenteditable area.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("L5WyD")
        .checksumAI(
          "Re-enter the corrected SQL query in the contenteditable area."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("L5WyD")
        .checksumAI(
          "Re-enter the corrected SQL query in the contenteditable area."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("5LDVq")
        .checksumAI(
          "Click on the contenteditable area to focus it before filling it with the corrected SQL query."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("LbJ0o")
        .checksumAI(
          "Click on the correct contenteditable area to focus it before filling it with the corrected SQL query."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("rXjKy")
        .checksumAI(
          "Fill the contenteditable area with the SQL query 'select * from qeng_brand_1 limit 10'."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("rXjKy")
        .checksumAI(
          "Fill the contenteditable area with the SQL query 'select * from qeng_brand_1 limit 10'."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("JA4HR")
        .checksumAI(
          "Re-attempt to fill the contenteditable area with the SQL query 'select * from qeng_brand_1 limit 10'."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("JA4HR")
        .checksumAI(
          "Re-attempt to fill the contenteditable area with the SQL query 'select * from qeng_brand_1 limit 10'."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("qbtR9")
        .checksumAI(
          "Click on the contenteditable area to focus it before filling it with the SQL query."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("bRzhT")
        .checksumAI("Fill the contenteditable area with the SQL query.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("bRzhT")
        .checksumAI("Fill the contenteditable area with the SQL query.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("CYRZK")
        .checksumAI("Correct the SQL query in the contenteditable area.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("CYRZK")
        .checksumAI("Correct the SQL query in the contenteditable area.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("lCbNP")
        .checksumAI("Fill the contenteditable area with the SQL query.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("lCbNP")
        .checksumAI("Fill the contenteditable area with the SQL query.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("yItSr")
        .checksumAI("Fill the contenteditable area with the SQL query again.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("yItSr")
        .checksumAI("Fill the contenteditable area with the SQL query again.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("select * from qeng_brand_1 limit 10");
      await page
        .checksumSelector("QFKql")
        .checksumAI(
          "Correct the SQL query syntax and input it into the contenteditable area."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("QFKql")
        .checksumAI(
          "Correct the SQL query syntax and input it into the contenteditable area."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("SELECT * FROM qeng_brand_1 LIMIT 10;");
      await page
        .checksumSelector("yiwoj")
        .checksumAI(
          "Clear the contenteditable area before re-entering the correct SQL query."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("yiwoj")
        .checksumAI(
          "Clear the contenteditable area before re-entering the correct SQL query."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("");
      await page
        .checksumSelector("lkzZ4")
        .checksumAI(
          "Enter the correct SQL query into the appropriate contenteditable area after verifying the table name."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("lkzZ4")
        .checksumAI(
          "Enter the correct SQL query into the appropriate contenteditable area after verifying the table name."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("SELECT * FROM qeng_pub_1 LIMIT 10;");
      await expect(page.getByText("OUNDEX").first()).not.toBeVisible();
      await expect(page.getByText("MALLINT").first()).not.toBeVisible();
      await page
        .checksumSelector("y51Ge")
        .checksumAI("Click the 'Run Query' button to execute the SQL query.")
        .getByTestId("sql-editor-run-query-btn")
        .click();
      await expect(page.getByText("Cancel Query").first()).toBeVisible();
      await expect(
        page.getByText("00:00:00.17 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.18 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.21 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.29 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.31 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.33 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.38 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.42 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.46 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.48 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.51 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.54 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.57 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.60 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.63 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.66 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.69 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.72 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.75 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.78 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.81 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.84 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.87 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.90 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.93 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.96 (1/1 query)").first()
      ).toBeVisible();
      await expect(page.getByText("Run Query").first()).toBeVisible();
      await page
        .checksumSelector("wjCMG")
        .checksumAI(
          "Click on the 'Tables and Views' link to verify the existence and accessibility of the table 'qeng_pub_1'."
        )
        .getByRole("link", { name: "Tables and Views" })
        .click();
      await expect(page).toHaveURL(/\/datacatalog\/tables(\?.*)?(\#.*)?$/);
      await page
        .checksumSelector("LxX5d")
        .checksumAI(
          "Click on the 'SQL Editor' link to navigate back to the SQL Editor."
        )
        .getByRole("link", { name: "SQL Editor" })
        .click();
      await expect(page).toHaveURL(/\/datahub\/sqleditor(\?.*)?(\#.*)?$/);
      await expect(page.getByText("SQL Editor").first()).toBeVisible();
      await expect(page.getByText("All Assets").first()).toBeVisible();
      await expect(page.getByText("1").first()).toBeVisible();
      await expect(page.getByText("INTEGER").first()).toBeVisible();
      await expect(page.getByText("age").first()).toBeVisible();
      await page
        .checksumSelector("mWYXb")
        .checksumAI("Enter the correct SQL query into the SQL Editor.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("mWYXb")
        .checksumAI("Enter the correct SQL query into the SQL Editor.")
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("SELECT * FROM skdm_view_1 LIMIT 10;");
      await expect(page.getByText("OUNDEX").first()).not.toBeVisible();
      await expect(page.getByText("MALLINT").first()).not.toBeVisible();
      await page
        .checksumSelector("2i42j")
        .checksumAI(
          "Enter the correct SQL query into the active SQL editor's contenteditable area."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .click();
      await page
        .checksumSelector("2i42j")
        .checksumAI(
          "Enter the correct SQL query into the active SQL editor's contenteditable area."
        )
        .locator("#sqleditor div")
        .filter({
          hasText:
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * f",
        })
        .first()
        .type("SELECT * FROM skdm_view_1 LIMIT 10;");
      await expect(page.getByText("ECOND").first()).toBeVisible();
      await expect(page.getByText("ELECT").first()).toBeVisible();
      await expect(
        page
          .getByText(
            "SECONDsqlSELECTsqlSIGNsqlSIGNUMsqlSINsqlSINHsqlSIZEsqlSMALLINTsqlSOUNDEXsql"
          )
          .first()
      ).not.toBeVisible();
      await page
        .checksumSelector("8w8El")
        .checksumAI(
          "Click the 'Run Query' button to attempt to execute the SQL query."
        )
        .getByTestId("sql-editor-run-query-btn")
        .click();
      await expect(page.getByText("Cancel Query").first()).toBeVisible();
      await expect(
        page.getByText("00:00:00.18 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.21 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.28 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.32 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.34 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.38 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.40 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.46 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.48 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.53 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.54 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.56 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.60 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.62 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.65 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.68 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.71 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.74 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.78 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.81 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.83 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.86 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.89 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.92 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.96 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:00.98 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.01 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.04 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.07 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.11 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.13 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.16 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.19 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.23 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.25 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.28 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.31 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.34 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.37 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.40 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.43 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.46 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.50 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.52 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.55 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.58 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.62 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.65 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.67 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.70 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.73 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.77 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.79 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.82 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.85 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.88 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.91 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.94 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:01.98 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.00 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.03 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.06 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.09 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.12 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.25 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.27 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.30 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.33 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.36 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.39 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.43 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.45 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.48 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.51 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.54 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.57 (1/1 query)").first()
      ).toBeVisible();
      await expect(
        page.getByText("00:00:02.61 (1/1 query)").first()
      ).toBeVisible();
      await page
        .checksumSelector("DwnND")
        .checksumAI("Click the 'Save Query' button to save the executed query.")
        .getByTestId("save-query-button")
        .click();
      await page
        .checksumSelector("dOmo8")
        .checksumAI(
          "Fill in the query name as 'today_query' in the input field."
        )
        .getByRole("textbox")
        .fill("today_query");
      await expect(
        page.getByText("Maximum characters: 64").first()
      ).toBeVisible();
      await page
        .checksumSelector("aDb90")
        .checksumAI(
          "Click the 'Save' button to save the query with the name 'today_query'."
        )
        .getByTestId("save-query-modal-save-button")
        .click();
      await expect(
        page.getByText("Maximum characters: 64").first()
      ).not.toBeVisible();
      await expect(page.getByText("today_query").first()).toBeVisible();
      await expect(page.getByText("The query was saved").first()).toBeVisible();
      await page
        .checksumSelector("MhH9k")
        .checksumAI(
          "Click the 'more' button associated with the 'today_query' tab to open the options for the saved query."
        )
        .getByTestId("editor-tabs-tab-1")
        .getByLabel("more")
        .click();
      await page
        .checksumSelector("z4Fqv")
        .checksumAI(
          "Click on the 'x' button next to the 'today_query' tab to attempt to close or delete the tab."
        )
        .getByRole("menuitem", { name: "Format Query" })
        .click();
      await page
        .checksumSelector("a7YVF")
        .checksumAI(
          "Click on the 'today_query' tab to check for additional options or context menus that might contain the delete functionality."
        )
        .getByRole("menuitem", { name: "Format Query" })
        .click();
      await page
        .checksumSelector("ADJGh")
        .checksumAI(
          "Click on the 'x' button next to the 'today_query' tab to attempt to close or delete the tab."
        )
        .getByRole("menuitem", { name: "Rename Tab" })
        .click();
      await page
        .checksumSelector("dJ2Kf")
        .checksumAI("Click the 'Cancel' button to close the rename dialog.")
        .getByRole("button", { name: "Cancel" })
        .click();
      await expect(
        page.getByText("Maximum characters: 64").first()
      ).not.toBeVisible();
      await page
        .checksumSelector("CGq5I")
        .checksumAI(
          "Click on the 'more' button next to the 'today_query' tab to reveal additional options."
        )
        .getByTestId("editor-tabs-tab-1")
        .getByLabel("more")
        .click();
      await page
        .checksumSelector("uNaC3")
        .checksumAI(
          "I will dismiss the current menu and continue to search for the delete option for the saved query elsewhere in the UI."
        )
        .locator("body")
        .click();
      await page
        .checksumSelector("SLZ3g")
        .checksumAI(
          "Click on the 'more' button next to the 'today_query' tab to reveal additional options."
        )
        .getByTestId("editor-tabs-tab-1")
        .getByLabel("more")
        .click();
      await page
        .checksumSelector("P6yaz")
        .checksumAI(
          "I will dismiss the current context menu and then look for the correct element to interact with to find the delete option."
        )
        .locator("body")
        .click();
      await page
        .checksumSelector("oO84L")
        .checksumAI(
          "Click on the 'Saved Queries' section in the navigation pane."
        )
        .getByRole("combobox")
        .click();
      await expect(
        page.getByText("QE-BQ-E2E-AutomationTesting-Brand1(staging)").first()
      ).toBeVisible();
      await expect(
        page.getByText("QE-BQ-E2E-AutomationTesting-Pub2(staging)").first()
      ).toBeVisible();
      await page
        .checksumSelector("eEOUG")
        .checksumAI("Click on the 'Saved Queries' link in the navigation pane.")
        .getByRole("link", { name: "Saved Queries" })
        .click();
      await expect(
        page.getByText("QE-BQ-E2E-AutomationTesting-Brand1(staging)").first()
      ).not.toBeVisible();
      await expect(
        page
          .getByText(
            "Query your data and partner-permissioned data, create new data assets, and save queries"
          )
          .first()
      ).not.toBeVisible();
      await expect(
        page.getByText("00:00:09.94 (1/1 query)").first()
      ).not.toBeVisible();
      await expect(page).toHaveURL(/\/datahub\/savedqueries(\?.*)?(\#.*)?$/);
      await expect(page.getByText("Rows per page:").first()).toBeVisible();
      await expect(
        page
          .getByText("View your saved queries and open them in SQL Editor")
          .first()
      ).toBeVisible();
      await expect(page.getByText("Name").first()).toBeVisible();
      await expect(page.getByText("today_query").first()).toBeVisible();
      await expect(page.getByText("0–0 of 0").first()).not.toBeVisible();
      await expect(page.getByText("1–1 of 1").first()).toBeVisible();
      await page
        .checksumSelector("TlKE6")
        .checksumAI(
          "Hover over the row corresponding to the 'today_query' to reveal any hidden options."
        )
        .getByRole("row", {
          name: "today_query select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10SELECT * FROM qeng_brand_1 LIMIT 10;SELECT * FROM qeng_pub_1 LIMIT 10;SELECT * FROM skdm_view_1 LIMIT 10;SELECT * FROM skdm_view_1 LIMIT 10; 1/2/2024 1/2/2024 11:24:22 AM qe_auto_test@liveramp.com",
        })
        .hover();
      await page
        .checksumSelector("GJv8N")
        .checksumAI(
          "Click on the 'more' button associated with the 'today_query'."
        )
        .getByTestId("saved-queries-actions-button")
        .click();
      await expect(page.getByText("View Details").first()).toBeVisible();
      await expect(page.getByText("Open in Editor").first()).toBeVisible();
      await page
        .checksumSelector("EC5zp")
        .checksumAI(
          "Click on the 'Delete' menu item to delete the 'today_query'."
        )
        .getByTestId("menu-item-delete")
        .click();
      await expect(page.getByText("View Details").first()).not.toBeVisible();
      await expect(page.getByText("Open in Editor").first()).not.toBeVisible();
      await page
        .checksumSelector("hffxO")
        .checksumAI(
          "Click on the 'Delete' button within the confirmation dialog to confirm the deletion of the 'today_query'."
        )
        .getByTestId("delete-modal-delete-button")
        .click();
      await expect(page.getByText("Delete Query?").first()).not.toBeVisible();
      await expect(
        page
          .getByText("This action will permanently delete the saved query.")
          .first()
      ).not.toBeVisible();
      await expect(page.getByText("1–1 of 1").first()).not.toBeVisible();
      await expect(page.getByText("today_query").first()).not.toBeVisible();
      await expect(
        page
          .getByText(
            "select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10select * from qeng_brand_1 limit 10SELECT * FROM qeng_brand_1 LIMIT 10;SELECT * FROM qeng_pub_1 LIMIT 10;SELECT * FROM skdm_view_1 LIMIT 10;SELECT * FROM skdm_view_1 LIMIT 10;"
          )
          .first()
      ).not.toBeVisible();
      await expect(page.getByText("0–0 of 0").first()).toBeVisible();
      await expect(
        page.getByText("There are no saved queries to display").first()
      ).toBeVisible();
    }
  );
});
